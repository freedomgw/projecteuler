import time

# Problem 12: Highly divisible triangular number
# http://projecteuler.net/problem=12

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would
# be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

def findAtLeastFiveHundredDivisors(triangleNumber):
	divisorCount = 0
	maxDivisor = 0
	for x in range(1,triangleNumber+1):
		if triangleNumber % x == 0:
			divisorCount = divisorCount + 1
			maxDivisor = int(triangleNumber / x)
		if divisorCount == 250:
			return True
		elif x >= maxDivisor:
			return False
	return False

def main():
	start = time.time()
	row = 0
	triangleNumber = 0
	while True:
		row = row + 1
		triangleNumber = triangleNumber + row;
		print("triangle number: " + str(triangleNumber))
		if findAtLeastFiveHundredDivisors(triangleNumber):
			print("triangle number that has at least five hundred divisors: " + str(triangleNumber))
			print('It took, ' + str(time.time()-start) + ' seconds.')
			return 0

if __name__ == "__main__":
    main()
